//---------------------------------------------------------------------------//
// Copyright (c) 2021 Mikhail Komarov <nemo@nil.foundation>
// Copyright (c) 2021 Nikita Kaskov <nbering@nil.foundation>
// Copyright (c) 2022 Alisa Cherniaeva <a.cherniaeva@nil.foundation>
// Copyright (c) 2022 Ilia Shirobokov <i.shirobokov@nil.foundation>
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------//
// @file Declaration of interfaces for auxiliary components for the SHA256 component.
//---------------------------------------------------------------------------//

#ifndef CRYPTO3_BLUEPRINT_COMPONENTS_PLONK_KIMCHI_PREPARE_BATCH_SCALAR_HPP
#define CRYPTO3_BLUEPRINT_COMPONENTS_PLONK_KIMCHI_PREPARE_BATCH_SCALAR_HPP

#include <nil/marshalling/algorithms/pack.hpp>

#include <nil/crypto3/zk/snark/arithmetization/plonk/constraint_system.hpp>

#include <nil/blueprint/blueprint/plonk/circuit.hpp>
#include <nil/blueprint/blueprint/plonk/assignment.hpp>
#include <nil/blueprint/component.hpp>

#include <nil/crypto3/zk/algorithms/generate_circuit.hpp>

#include <nil/blueprint/components/systems/snark/plonk/kimchi/oracles_scalar.hpp>
#include <nil/blueprint/components/systems/snark/plonk/kimchi/detail/binding.hpp>
#include <nil/blueprint/components/systems/snark/plonk/kimchi/types/proof.hpp>
#include <nil/blueprint/components/systems/snark/plonk/kimchi/detail/zkpm_evaluate.hpp>
#include <nil/blueprint/components/systems/snark/plonk/kimchi/detail/constraints/perm_scalars.hpp>
#include <nil/blueprint/components/systems/snark/plonk/kimchi/detail/constraints/generic_scalars.hpp>
#include <nil/blueprint/components/systems/snark/plonk/kimchi/detail/constraints/index_terms_scalars.hpp>
#include <nil/blueprint/components/systems/snark/plonk/kimchi/types/alpha_argument_type.hpp>

#include <nil/blueprint/components/algebra/fields/plonk/field_operations.hpp>

namespace nil {
    namespace blueprint {
        namespace components {

            // partial verification of the proof before batched verification (scalar field part)
            // https://github.com/o1-labs/proof-systems/blob/1f8532ec1b8d43748a372632bd854be36b371afe/kimchi/src/verifier.rs#L472
            // Input:  kimchi proof (scalar field part),
            //          challenges generated by SpongeFq,
            //          verifier index (public data)
            // Output: batch evaluation proof, scalar field part
            //      (https://github.com/o1-labs/proof-systems/blob/1f8532ec1b8d43748a372632bd854be36b371afe/kimchi/src/verifier.rs#L881-L888)
            template<typename ArithmetizationType, typename CurveType, typename KimchiParamsType,
                typename KimchiCommitmentParamsType, std::size_t... WireIndexes>
            class prepare_batch_scalar;

            template<typename CurveType, typename KimchiParamsType,
                     typename KimchiCommitmentParamsType, std::size_t W0, std::size_t W1,
                     std::size_t W2, std::size_t W3, std::size_t W4, std::size_t W5, std::size_t W6, std::size_t W7,
                     std::size_t W8, std::size_t W9, std::size_t W10, std::size_t W11, std::size_t W12,
                     std::size_t W13, std::size_t W14>
            class prepare_batch_scalar<
                snark::plonk_constraint_system<typename CurveType::scalar_field_type>,
                CurveType, KimchiParamsType, KimchiCommitmentParamsType,
                W0, W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14> {

                using BlueprintFieldType = typename CurveType::scalar_field_type;

                typedef snark::plonk_constraint_system<BlueprintFieldType>
                    ArithmetizationType;

                using var = snark::plonk_variable<typename BlueprintFieldType::value_type>;

                using sub_component = zk::components::subtraction<ArithmetizationType, W0, W1, W2>;

                using oracles_component = oracles_scalar<ArithmetizationType, CurveType, KimchiParamsType,
                            KimchiCommitmentParamsType, W0, W1, W2, W3, W4, W5,
                            W6, W7, W8, W9, W10, W11, W12, W13, W14>;

                using zkpm_evaluate_component = zkpm_evaluate<ArithmetizationType,
                            W0, W1, W2, W3, W4, W5,
                            W6, W7, W8, W9, W10, W11, W12, W13, W14>;

                using perm_scalars_component = perm_scalars<ArithmetizationType, KimchiParamsType,
                            W0, W1, W2, W3, W4, W5,
                            W6, W7, W8, W9, W10, W11, W12, W13, W14>;

                using generic_scalars_component = generic_scalars<ArithmetizationType, KimchiParamsType,
                            W0, W1, W2, W3, W4, W5,
                            W6, W7, W8, W9, W10, W11, W12, W13, W14>;

                using index_terms_scalars_component = index_terms_scalars<ArithmetizationType, KimchiParamsType,
                            W0, W1, W2, W3, W4, W5,
                            W6, W7, W8, W9, W10, W11, W12, W13, W14>;

                using proof_binding = typename zk::components::binding<ArithmetizationType,
                    BlueprintFieldType, KimchiParamsType>;

                using batch_proof = batch_evaluation_proof_scalar<BlueprintFieldType,
                    ArithmetizationType, KimchiParamsType, KimchiCommitmentParamsType>;

                using index_terms_list = typename KimchiParamsType::circuit_params::index_terms_list;

                using kimchi_constants = zk::components::kimchi_inner_constants<KimchiParamsType>;

                using verifier_index_type = kimchi_verifier_index_scalar<BlueprintFieldType>;

                constexpr static const std::size_t selector_seed = 0x0f24;

                constexpr static std::size_t rows() {
                    std::size_t row = 0;

                    row += oracles_component::rows_amount;

                    row += zkpm_evaluate_component::rows_amount;

                    row += perm_scalars_component::rows_amount;

                    row += generic_scalars_component::rows_amount;

                    row += sub_component::rows_amount;

                    row += index_terms_scalars_component::rows_amount;

                    return row;
                }

            public:
                constexpr static const std::size_t rows_amount = rows();
                constexpr static const std::size_t gates_amount = 0;

                constexpr static const std::size_t f_comm_msm_size =
                    kimchi_constants::f_comm_msm_size;

                struct params_type {
                    verifier_index_type &verifier_index;
                    kimchi_proof_scalar<BlueprintFieldType, KimchiParamsType,
                        KimchiCommitmentParamsType::eval_rounds> &proof;
                    typename proof_binding::fq_sponge_output &fq_output;
                };

                struct result_type {
                    batch_proof prepared_proof;
                    var zeta_to_srs_len;
                    std::array<var, f_comm_msm_size> f_comm_scalars;
                };

                static result_type
                    generate_circuit(blueprint<ArithmetizationType> &bp,
                                     blueprint_public_assignment_table<ArithmetizationType> &assignment,
                                     const params_type &params,
                                     const std::size_t start_row_index) {
                    std::size_t row = start_row_index;

                    generate_assignments_constant(bp, assignment, params, start_row_index);

                    var zero = var(0, start_row_index, false, var::column_type::constant);
                    var one = var(0, start_row_index + 1, false, var::column_type::constant);
                    var domain_size = var(0, start_row_index + 2, false, var::column_type::constant);
                    var max_poly_size = var(0, start_row_index + 3, false, var::column_type::constant);

                    typename oracles_component::params_type oracles_params(
                        params.verifier_index, params.proof, params.fq_output
                    );
                    auto oracles_output = oracles_component::generate_circuit(bp, assignment,
                        oracles_params, row);
                    row += oracles_component::rows_amount;

                    std::array<var, f_comm_msm_size> f_comm_scalars;
                    std::size_t f_comm_idx = 0;

                    var zkp = zkpm_evaluate_component::generate_circuit(bp, assignment,
                        {params.verifier_index.omega, params.verifier_index.domain_size,
                        oracles_output.oracles.zeta}, row).output;
                    row += zkpm_evaluate_component::rows_amount;

                    std::pair<std::size_t, std::size_t> alpha_idxs =
                        index_terms_list::alpha_map(argument_type::Permutation);
                    f_comm_scalars[f_comm_idx] = perm_scalars_component::generate_circuit(bp,
                        assignment, {oracles_output.combined_evals, oracles_output.alpha_powers,
                        alpha_idxs.first,
                        params.fq_output.beta, params.fq_output.gamma,
                        zkp}, row).output;
                    f_comm_idx += 1;
                    row += perm_scalars_component::rows_amount;

                    alpha_idxs =
                        index_terms_list::alpha_map(argument_type::Generic);
                    std::array<var, generic_scalars_component::output_size> generic_scalars =
                        generic_scalars_component::generate_circuit(bp,
                            assignment, {oracles_output.combined_evals, oracles_output.alpha_powers,
                            alpha_idxs.first}, row).output;
                    std::copy(std::begin(generic_scalars), std::end(generic_scalars),
                        std::begin(f_comm_scalars) + f_comm_idx);
                    f_comm_idx += generic_scalars_component::output_size;
                    row += generic_scalars_component::rows_amount;

                    // xi^n - 1
                    var vanishing_eval = zk::components::generate_circuit<sub_component>(bp,
                        assignment, {oracles_output.zeta_pow_n, one}, row
                        ).output;
                    row += sub_component::rows_amount;

                    auto index_scalars = index_terms_scalars_component::generate_circuit(
                            bp, assignment, {
                            oracles_output.oracles.zeta,
                            oracles_output.oracles.alpha,
                            params.fq_output.beta, params.fq_output.gamma,
                            params.fq_output.joint_combiner,
                            oracles_output.combined_evals,
                            params.verifier_index.omega,
                            params.verifier_index.domain_size}, row
                        ).output;
                    row += index_terms_scalars_component::rows_amount;

                    for(std::size_t i = 0; i < index_scalars.size(); i++) {
                        f_comm_scalars[f_comm_idx++] = index_scalars[i];
                    }

                    var zeta_to_srs_len = oracles_output.powers_of_eval_points_for_chunks[0];

                    assert(row == start_row_index + rows_amount);

                    result_type res = {
                        {oracles_output.cip,
                        params.fq_output,
                        oracles_output.eval_points,
                        oracles_output.oracles.u,
                        oracles_output.oracles.v,
                        params.proof.opening,
                        oracles_output.transcript},
                        zeta_to_srs_len,
                        f_comm_scalars
                    };

                    return res;
                }

                static result_type generate_assignments(blueprint_assignment_table<ArithmetizationType> &assignment,
                                                        const params_type &params,
                                                        std::size_t start_row_index) {

                    std::size_t row = start_row_index;

                    var zero = var(0, start_row_index, false, var::column_type::constant);
                    var one = var(0, start_row_index + 1, false, var::column_type::constant);
                    var domain_size = var(0, start_row_index + 2, false, var::column_type::constant);
                    var max_poly_size = var(0, start_row_index + 3, false, var::column_type::constant);

                    typename oracles_component::params_type oracles_params(
                        params.verifier_index, params.proof, params.fq_output
                    );
                    auto oracles_output = oracles_component::generate_assignments(assignment,
                        oracles_params, row);
                    row += oracles_component::rows_amount;

                    std::array<var, f_comm_msm_size> f_comm_scalars;
                    std::size_t f_comm_idx = 0;
                    var zkp = zkpm_evaluate_component::generate_assignments(assignment,
                        {params.verifier_index.omega, params.verifier_index.domain_size,
                        oracles_output.oracles.zeta}, row).output;
                    row += zkpm_evaluate_component::rows_amount;

                    std::pair<std::size_t, std::size_t> alpha_idxs =
                        index_terms_list::alpha_map(argument_type::Permutation);
                    f_comm_scalars[f_comm_idx] = perm_scalars_component::generate_assignments(
                        assignment, {oracles_output.combined_evals, oracles_output.alpha_powers,
                        alpha_idxs.first,
                        params.fq_output.beta, params.fq_output.gamma,
                        zkp}, row).output;
                    f_comm_idx += 1;
                    row += perm_scalars_component::rows_amount;

                    alpha_idxs =
                        index_terms_list::alpha_map(argument_type::Generic);
                    std::array<var, generic_scalars_component::output_size> generic_scalars =
                        generic_scalars_component::generate_assignments(
                            assignment, {oracles_output.combined_evals, oracles_output.alpha_powers,
                            alpha_idxs.first}, row).output;
                    std::copy(std::begin(generic_scalars), std::end(generic_scalars),
                        std::begin(f_comm_scalars) + f_comm_idx);
                    f_comm_idx += generic_scalars_component::output_size;
                    row += generic_scalars_component::rows_amount;

                    // xi^n - 1
                    var vanishing_eval = sub_component::generate_assignments(
                        assignment, {oracles_output.zeta_pow_n, one}, row
                        ).output;
                    row += sub_component::rows_amount;

                    auto index_scalars = index_terms_scalars_component::generate_assignments(
                            assignment, {
                            oracles_output.oracles.zeta,
                            oracles_output.oracles.alpha,
                            params.fq_output.beta, params.fq_output.gamma,
                            params.fq_output.joint_combiner,
                            oracles_output.combined_evals,
                            params.verifier_index.omega,
                            params.verifier_index.domain_size}, row
                        ).output;
                        row += index_terms_scalars_component::rows_amount;
                    for(std::size_t i = 0; i < index_scalars.size(); i++) {
                        f_comm_scalars[f_comm_idx] = index_scalars[i];
                    }

                    var zeta_to_srs_len = oracles_output.powers_of_eval_points_for_chunks[0];

                    assert(row == start_row_index + rows_amount);

                    result_type res = {
                        {oracles_output.cip,
                        params.fq_output,
                        oracles_output.eval_points,
                        oracles_output.oracles.u,
                        oracles_output.oracles.v,
                        params.proof.opening,
                        oracles_output.transcript},
                        zeta_to_srs_len,
                        f_comm_scalars
                    };

                    return res;
                }

            private:
                static void generate_gates(blueprint<ArithmetizationType> &bp,
                                           blueprint_public_assignment_table<ArithmetizationType> &assignment,
                                           const params_type &params,
                                           std::size_t component_start_row = 0) {
                }

                static void
                    generate_copy_constraints(blueprint<ArithmetizationType> &bp,
                                              blueprint_public_assignment_table<ArithmetizationType> &assignment,
                                              const params_type &params,
                                              std::size_t component_start_row = 0) {

                }

                static void
                    generate_assignments_constant(blueprint<ArithmetizationType> &bp,
                                              blueprint_public_assignment_table<ArithmetizationType> &assignment,
                                              const params_type &params,
                                              std::size_t component_start_row) {
                        std::size_t row = component_start_row;
                        assignment.constant(0)[row] = 0;
                        row++;
                        assignment.constant(0)[row] = 1;
                        row++;

                        assignment.constant(0)[row] = params.verifier_index.domain_size;
                        row++;
                        assignment.constant(0)[row] = KimchiCommitmentParamsType::max_poly_size;
                }
            };
        }    // namespace components
    }        // namespace blueprint
}    // namespace nil

#endif    // CRYPTO3_BLUEPRINT_COMPONENTS_PLONK_KIMCHI_PREPARE_BATCH_SCALAR_HPP
